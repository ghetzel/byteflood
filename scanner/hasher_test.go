package scanner

import (
	"github.com/stretchr/testify/require"
	"testing"
)

var TestDataPieces = []byte{
	0x8f, 0xa8, 0xc1, 0xb1, 0x41, 0x6a, 0xed, 0x0d, 0x2d, 0x72, 0x5e, 0x03, 0x1e, 0x59, 0xb0, 0x87, 0x2c, 0xb9, 0x25, 0x70,
	0x53, 0x33, 0xed, 0x78, 0x47, 0xc1, 0x82, 0x17, 0x22, 0x75, 0x40, 0x1a, 0x96, 0xce, 0x24, 0x89, 0xa6, 0x12, 0xfc, 0x63,
	0xe0, 0xfe, 0x63, 0xbc, 0xe7, 0xcb, 0x2a, 0x4f, 0x28, 0x07, 0xc1, 0x52, 0x42, 0x42, 0x77, 0x85, 0x56, 0xd8, 0xdb, 0x8f,
	0xdd, 0xb1, 0x31, 0xd2, 0xe7, 0xb0, 0x91, 0x04, 0x0b, 0xd1, 0x28, 0x74, 0xd1, 0x99, 0x72, 0xa0, 0xf7, 0xa4, 0xa8, 0x0d,
	0xc8, 0xc9, 0x0f, 0xa0, 0x19, 0xd1, 0xce, 0x5c, 0xbe, 0xf6, 0x9e, 0xbf, 0x5a, 0x2d, 0xe5, 0xb5, 0x35, 0xfe, 0xb7, 0x0e,
	0xbe, 0xf8, 0xe7, 0x17, 0x28, 0x7b, 0xc5, 0x84, 0x97, 0x8c, 0x29, 0x3c, 0x72, 0x66, 0xfd, 0xc3, 0xe9, 0x71, 0x88, 0x45,
	0xae, 0xdc, 0xb5, 0xf1, 0x31, 0xcf, 0x5a, 0xbb, 0xd4, 0x9b, 0x7d, 0x9e, 0x5c, 0x34, 0x1b, 0x6f, 0x7d, 0xdf, 0x13, 0xaa,
	0xd4, 0x4a, 0xc5, 0xaf, 0xca, 0x52, 0x51, 0xff, 0xad, 0x3f, 0xe6, 0xf6, 0xda, 0x96, 0x0f, 0xbe, 0x10, 0x7c, 0xfb, 0x66,
	0xf9, 0x70, 0xf5, 0x78, 0x8c, 0x1c, 0x55, 0xfb, 0xc7, 0x68, 0x6a, 0xdb, 0xaa, 0xdd, 0xad, 0xce, 0xca, 0x3e, 0xd1, 0xfe,
	0x12, 0xc2, 0x57, 0x24, 0xb2, 0x31, 0x65, 0xa3, 0x23, 0x59, 0x1f, 0x54, 0x7a, 0x21, 0xdd, 0x52, 0xf7, 0x74, 0x2b, 0x14,
	0x99, 0xb5, 0xbc, 0x7a, 0xb4, 0x33, 0x45, 0x0c, 0xce, 0xd5, 0x8e, 0x65, 0x1d, 0x5a, 0x17, 0xb7, 0x41, 0x19, 0xde, 0xe5,
	0x5b, 0x58, 0x0c, 0x5d, 0x96, 0x07, 0x6e, 0x1d, 0x1e, 0xf6, 0x7b, 0xda, 0xac, 0x65, 0x5a, 0xa2, 0x61, 0xb3, 0x1f, 0xa5,
	0xde, 0x56, 0x21, 0x99, 0x8c, 0xa0, 0x10, 0x97, 0xec, 0x26, 0xbf, 0x84, 0xea, 0x54, 0xa5, 0x70, 0xc6, 0x5d, 0xb2, 0x58,
	0xcf, 0xd8, 0xa9, 0x5e, 0x9b, 0x6d, 0xbe, 0x0f, 0x70, 0x3b, 0x7c, 0x5a, 0xf6, 0x62, 0xfd, 0x3f, 0x2f, 0xe6, 0x10, 0x17,
	0x98, 0x11, 0xff, 0x19, 0x0f, 0x9a, 0x7c, 0x3a, 0xd9, 0x36, 0x54, 0x68, 0xc7, 0x1b, 0xcd, 0x9a, 0xb0, 0xcf, 0xbc, 0x9e,
	0xfb, 0x47, 0xfe, 0xa6, 0xc1, 0x56, 0xa3, 0xd8, 0x74, 0xa5, 0x36, 0xb2, 0x92, 0x23, 0xbb, 0x4c, 0x3a, 0x0a, 0x43, 0x79,
	0xcc, 0x4b, 0x6a, 0x49, 0xd9, 0xea, 0xff, 0xf0, 0x1d, 0xf8, 0x14, 0x9e, 0x3e, 0x54, 0xd0, 0x24, 0xb2, 0x98, 0x4e, 0xe9,
	0x88, 0xf0, 0xc4, 0x6c, 0x5d, 0x5f, 0xd2, 0xcd, 0x52, 0xe7, 0x48, 0x9f, 0x06, 0xa6, 0xa3, 0x41, 0xce, 0xae, 0x63, 0xc0,
	0x03, 0x52, 0x08, 0xbb, 0xdf, 0x99, 0xf0, 0xdf, 0x16, 0x33, 0x69, 0x46, 0xa3, 0xd2, 0xa4, 0x67, 0x77, 0x05, 0x28, 0x13,
	0x20, 0x36, 0x9d, 0x03, 0x98, 0x99, 0x9b, 0x7d, 0xdd, 0x7b, 0x5a, 0x16, 0xae, 0xaa, 0x9f, 0x47, 0xce, 0x44, 0xb3, 0xd4,
	0x0d, 0xb2, 0x46, 0x25, 0xe8, 0x75, 0x79, 0x97, 0x56, 0x14, 0xcf, 0x20, 0x04, 0xdd, 0x0c, 0xf4, 0x5a, 0xaf, 0x5a, 0x86,
}

func TestCreateTorrent(t *testing.T) {
	assert := require.New(t)

	if torrent, err := CreateTorrent(`testdata.dat`, 256); err == nil {
		info := torrent.Info

		assert.Equal(`testdata.dat`, info.Name)
		assert.Equal(5150, info.Length)
		assert.Equal(1, info.Private)
		assert.Equal(256, info.PieceLength)

		for i, actual := range info.Pieces {
			expected := TestDataPieces[i]
			assert.Equal(expected, actual, "Pieces[%d]: byte mismatch", i)
		}

		if actual, err := torrent.PieceCount(); err == nil {
			assert.Equal(21, actual)
		} else {
			assert.Nil(err)
		}

		for i := 0; i < 21; i++ {
			if actual, ok := torrent.GetPieceSum(i); ok {
				offset := (i * 20)
				expected := TestDataPieces[offset:(offset + 20)]

				assert.Equal(expected, actual, "Sum[%d]: slice mismatch %x", i, expected)
			} else {
				assert.True(ok, "Sum[%d]: unexpectedly empty", i)
			}
		}

		assert.Empty(info.Files)
	} else {
		t.Error(err)
	}
}
